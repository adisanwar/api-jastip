// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username String  @id @db.VarChar(100)
  password String  @db.VarChar(100)
  name     String  @db.VarChar(100)
  token    String? @db.VarChar(100)
  isAdmin  Boolean

  contacts Contact[]

  @@map("users")
}

model Contact {
  id          Int         @id @default(autoincrement())
  fullname    String      @db.VarChar(100)
  photo       String?     @db.VarChar(100)
  email       String?     @db.VarChar(100)
  phone       String?     @db.VarChar(20)
  gender      String?     @db.VarChar(20)
  amount      Int?
  dateofbirth DateTime?
  ofcNo       String?     @db.VarChar(20)
  nationalId  Int?   
  username    String      @db.VarChar(100)

  user        User        @relation(fields: [username], references: [username])
  tmp_shuffle TmpShuffle[]
  addresses   Address[]
  tickets     Ticket[]    // Updated plural form for consistency

  @@map("contacts")
}



model Address {
  id          Int     @id @default(autoincrement())
  street      String? @db.VarChar(255)
  city        String? @db.VarChar(100)
  province    String? @db.VarChar(100)
  country     String  @db.VarChar(100)
  postal_code String  @db.VarChar(10)
  contactId  Int

  contact Contact @relation(fields: [contactId], references: [id])

  @@map("addresses")
}

model Show {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(255)
  photo       String? @db.VarChar(100)
  description String? @db.VarChar(2000)
  duration    String? @db.VarChar(50)
  rating      String? @db.VarChar(20)
  price       Int?
  theaterId   Int     // Foreign key ke Theater
  showtimeId   Int
  
  theater     Theater @relation(fields: [theaterId], references: [id])
  showtime    Showtime @relation(fields: [showtimeId], references: [id])

  ticket Ticket []

  @@map("shows")
}

model Showtime {
  id          Int     @id @default(autoincrement())
  showDate    DateTime?
  showTime    String? @db.VarChar(255)

  show  Show []
  

  @@map("showtimes")
}

model Theater {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  photo       String? @db.VarChar(100)
  location    String? @db.VarChar(255)
  capacity    String? @db.VarChar(50)

  shows     Show[] // Relasi ke Show

  @@map("theaters")
}

model Ticket {
  id           Int     @id @default(autoincrement())
  seatNumber   String?  @db.VarChar(255)
  photo        String? @db.VarChar(100)
  purchaseDate DateTime? @default(now())
  status       String? @db.VarChar(100)
  showId       Int
  contactId   Int

  show Show @relation(fields: [showId], references: [id])
  contact Contact @relation(fields: [contactId], references: [id])


  tmp_shuffle TmpShuffle []
  order Order[]

  @@map("tickets")
}

model Order {
  id            Int     @id @default(autoincrement())
  orderId       String   @unique
  amount        Int
  status        String  @db.VarChar(255)
  paymentUrl    String? @db.VarChar(255)
  ticketId      Int    

  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@map("orders")
}


model TmpShuffle {
  id            Int      @id @default(autoincrement())
  isShuffle     Boolean
  contactId     Int
  ticketId      Int
  shuffledAt    DateTime @default(now()) 

  contact Contact @relation(fields: [contactId], references: [id])
  ticket  Ticket  @relation(fields: [ticketId], references: [id])

  @@map("tmp_shuffle")
}